(()=>{"use strict";var t={82:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.CancelButton=void 0;class n extends HTMLButtonElement{constructor(t,e,n){super(),this.container=t,this.editor=e,this.selection=n,this.setAttribute("class","cancel"),this.textContent="Cancel",this.addEventListener("click",this.handleClick.bind(this))}handleClick(){this.editor.anno.cancelSelected(),this.container.dataset.annotationId?this.editor.makeReadOnly(this.container,this.selection):this.container.remove()}}e.CancelButton=n},578:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.DeleteButton=void 0;class n extends HTMLButtonElement{constructor(t,e){super(),this.container=t,this.editor=e,this.setAttribute("class","delete"),this.textContent="Delete",this.addEventListener("click",this.handleClick.bind(this))}handleClick(){this.editor.anno.removeAnnotation(this.container.dataset.annotationId),this.container.remove(),this.editor.storage.adapter.delete(this.container.dataset.annotationId)}}e.DeleteButton=n},917:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SaveButton=void 0;class n extends HTMLButtonElement{constructor(t,e,n,i){super(),this.container=t,this.editor=e,this.selection=n,this.textInput=i,this.setAttribute("class","save"),this.textContent="Save",this.addEventListener("click",this.handleClick.bind(this))}async handleClick(){this.selection.motivation="supplementing",Array.isArray(this.selection.body)&&0==this.selection.body.length?this.selection.body.push({type:"TextualBody",purpose:"transcribing",value:this.textInput.textContent||"",format:"text/html"}):Array.isArray(this.selection.body)&&(this.selection.body[0].value=this.textInput.textContent||""),console.log(this.selection),await this.editor.anno.updateSelected(this.selection),this.editor.anno.saveSelected(),this.editor.makeReadOnly(this.container)}}e.SaveButton=n}},e={};function n(i){var o=e[i];if(void 0!==o)return o.exports;var a=e[i]={exports:{}};return t[i](a,a.exports,n),a.exports}var i={};(()=>{var t=i;Object.defineProperty(t,"__esModule",{value:!0});const e=n(82),o=n(578),a=n(917);t.default=class{constructor(t,n,i){this.anno=t,this.storage=n,this.anno.disableEditor=!0,this.annotationContainer=i,customElements.define("save-button",a.SaveButton,{extends:"button"}),customElements.define("cancel-button",e.CancelButton,{extends:"button"}),customElements.define("delete-button",o.DeleteButton,{extends:"button"}),document.addEventListener("annotations-loaded",this.handleAnnotationsLoaded.bind(this)),this.anno.on("createSelection",this.handleCreateSelection.bind(this)),this.anno.on("selectAnnotation",this.handleSelectAnnotation.bind(this))}handleAnnotationsLoaded(){this.annotationContainer.querySelectorAll(".annotation-display-container").forEach((t=>t.remove())),this.anno.getAnnotations().forEach((t=>{this.annotationContainer.append(this.createDisplayBlock(t))}))}async handleCreateSelection(t){const e=this.createEditorBlock(t);e&&this.annotationContainer.append(e)}handleSelectAnnotation(t){this.makeAllReadOnly();const e=document.querySelector('[data-annotation-id="'+t.id+'"]');e&&e instanceof HTMLElement&&this.makeEditable(e,t)}createDisplayBlock(t){const e=document.createElement("div");e.setAttribute("class","annotation-display-container");const n=document.createElement("div");return Array.isArray(t.body)&&t.body.length>0&&(n.innerHTML=t.body[0].value),e.append(n),void 0!==t.id&&(e.dataset.annotationId=t.id,n.addEventListener("click",(()=>{this.anno.selectAnnotation(t.id),this.makeAllReadOnly(),this.makeEditable(e,t)}))),e}makeEditable(t,n){if("annotation-edit-container"==t.getAttribute("class"))return;t.setAttribute("class","annotation-edit-container");const i=t.querySelector("div");return i&&(i.setAttribute("class","annotation-editor"),i.setAttribute("contenteditable","true"),i.focus(),t.append(new a.SaveButton(t,this,n,i)),t.append(new e.CancelButton(t,this,n))),t.dataset.annotationId&&t.append(new o.DeleteButton(t,this)),t}makeReadOnly(t,e){t.setAttribute("class","annotation-display-container");const n=t.querySelector("div");return n&&(n.setAttribute("class",""),n.setAttribute("contenteditable","false"),e&&void 0!==e.body&&Array.isArray(e.body)&&(n.innerHTML=e.body[0].value,this.anno.addAnnotation(e))),t.querySelectorAll("button").forEach((t=>t.remove())),t}makeAllReadOnly(){document.querySelectorAll(".annotation-edit-container").forEach((t=>{t instanceof HTMLElement&&this.makeReadOnly(t)}))}createEditorBlock(t){return this.makeEditable(this.createDisplayBlock(t),t)}}})(),module.exports=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,